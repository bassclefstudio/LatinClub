@page "/"
@using ViewModels
@using BassClefStudio.AppModel.Bindings
@using System.Collections.ObjectModel
@using LatinClub.Core.Events
@using LatinClub.Core.News
@inject IBlazorViewProvider ViewProvider

<Grid RowGap="16" ColumnGap="16">
    <RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="3*"/>
    </RowDefinitions>
    <ColumnDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="*"/>
        <RowDefinition Height="Auto"/>
    </ColumnDefinitions>
    <Content>
        <GridElement Row="1" ColumnSpan="2">
            <div class="accent padding center-align flex-container flex-center"><h1>RHS Latin Club</h1></div>
        </GridElement>
        <GridElement Row="2" Column="1" ColumnSpan="@(ShowWide ? 1 : 2)">
            @foreach(var e in EventBinding.CurrentValue?.Take(3) ?? new ClubEvent[0])
            {
               <div class="margin rounded-corners center-align chrome padding flex-vertical flex-container flex-center">
                    <h1>@e.Name</h1>
                    <p>@e.Description</p>
               </div>     
            }

            @if(!ShowWide)
            {
                @foreach(var e in ArticleBinding.CurrentValue?.Take(3) ?? new Article[0])
                {
                   <div class="margin rounded-corners center-align chrome padding flex-vertical flex-container flex-center">
                        <h1>@e.Title</h1>
                        <Markdown Content="@e.Content"/>
                   </div>     
                }
            }
        </GridElement>
        @if(ShowWide)
        {
            <GridElement Row="2" Column="2">
                @foreach(var e in ArticleBinding.CurrentValue?.Take(3) ?? new Article[0])
                    {
                       <div class="margin rounded-corners center-align chrome padding flex-vertical flex-container flex-center">
                            <h1>@e.Title</h1>
                            <Markdown Content="@e.Content"/>
                       </div>     
                    }
            </GridElement>        
        }
    </Content>
</Grid>

<MediaQuery Media="@Breakpoints.MediumUp" @bind-Matches="ShowWide" />

@code
{
    public MainViewModel ViewModel { get; set; }

    bool ShowWide = false;

    internal IBinding<ObservableCollection<ClubEvent>> EventBinding;

    internal IBinding<ObservableCollection<Article>> ArticleBinding;


    protected override void OnInitialized()
    {
        ViewModel = (ViewProvider.CurrentView as BlazorView<MainViewModel>)?.ViewModel;

        if(ViewModel != null)
        {
            EventBinding = ViewModel.MyBinding().Property(v => v.Events).AsCollection();
            EventBinding.CurrentValueChanged += (s, e) => ViewModelChanged();
            ArticleBinding = ViewModel.MyBinding().Property(v => v.Articles).AsCollection();
            ArticleBinding.CurrentValueChanged += (s, e) => ViewModelChanged();
        }
    }

    private void ViewModelChanged()
    {
        StateHasChanged();
    }
}
